{"version":3,"sources":["TodoList.js","input.js","List.js","index.js"],"names":["TodoList","Component","handleChange","e","setState","inpValue","target","value","addTodo","todos","title","state","done","delTodo","idx","splice","toggle","index","newTodos","JSON","parse","stringify","renderTodos","map","todo","onClick","checked","type","this","input","focus","localStorage","getItem","setItem","ref","inp","onChange","ReactDOM","render","document","getElementById"],"mappings":"mLAoKeA,GCjKKC,YCADA,Y,kDFKf,aAAc,IAAD,8BACT,gBAMJC,aAAe,SAACC,GACZ,EAAKC,SAAS,CAACC,SAASF,EAAEG,OAAOC,SARxB,EAyBbC,QAAU,WACN,EAAKJ,SAAS,CACVK,MAAM,CACF,CACIC,MAAM,EAAKC,MAAMN,SAASO,MAAK,IAFlC,mBAIE,EAAKD,MAAMF,WA/Bb,EAmCbI,QAAU,SAACC,GACP,IAAML,EAAK,YAAO,EAAKE,MAAMF,OAC7BA,EAAMM,OAAOD,EAAI,GACjB,EAAKV,SAAS,CACVK,MAAMA,KAvCD,EA0CbO,OAAS,SAACC,GACN,IAAIC,EAAWC,KAAKC,MAAMD,KAAKE,UAAU,EAAKV,MAAMF,QACpDS,EAASD,GAAOL,MAAQM,EAASD,GAAOL,KACxC,EAAKR,SAAS,CACVK,MAAMS,KA9CD,EAiDbI,YAAc,SAACV,GACX,OAAO,EAAKD,MAAMF,MAAMc,KAAI,SAACC,EAAKV,GAC9B,GAAGF,IAAOY,EAAKZ,KACX,OAAO,4BACH,2BACIa,QAAS,kBAAI,EAAKT,OAAOF,IACzBY,QAASd,EACTe,KAAK,aAET,8BAAOH,EAAKd,OACZ,4BACIe,QAAS,kBAAI,EAAKZ,QAAQC,KAD9B,qBAzDZ,EAAKH,MAAQ,CACTN,SAAS,GACTI,MAAQ,IAJH,E,gEAWTmB,KAAKC,MAAMC,QACX,IAAIrB,EAAQsB,aAAaC,QAAQ,SAC9BvB,GACCmB,KAAKxB,SAAS,CACVK,MAAMU,KAAKC,MAAMX,O,2CAKzBsB,aAAaE,QACT,QACAd,KAAKE,UAAUO,KAAKjB,MAAMF,U,+BA8CzB,IAAD,SAEqBmB,KAAKjB,MAAjBN,GAFT,EAEGI,MAFH,EAESJ,UAEb,OACI,6BACI,2BACI6B,IAAK,SAAAC,GAAG,OAAE,EAAKN,MAAQM,GACvB5B,MAAOF,EACPsB,KAAK,OACLS,SAAUR,KAAK1B,eAEnB,4BAAQuB,QAASG,KAAKpB,SAAtB,gBACA,wDACA,4BACKoB,KAAKN,aAAY,IAEtB,wDACA,4BACKM,KAAKN,aAAY,S,GAzFfrB,cGDvBoC,IAASC,OAAO,kBAAC,EAAD,MAAaC,SAASC,eAAe,U","file":"static/js/main.e510a1c1.chunk.js","sourcesContent":["import React,{ Component} from 'react';\r\n\r\nimport input from './input';\r\nimport List from './List';\r\n\r\n\r\nclass TodoList extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            inpValue:'',\r\n            todos : []\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({inpValue:e.target.value})\r\n    }\r\n    componentDidMount(){\r\n        this.input.focus();\r\n        let todos = localStorage.getItem(\"todos\");\r\n        if(todos){\r\n            this.setState({\r\n                todos:JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n    componentDidUpdate(){\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n        )\r\n    }\r\n    addTodo = ()=>{\r\n        this.setState({\r\n            todos:[\r\n                {\r\n                    title:this.state.inpValue,done:false\r\n                },\r\n                ...this.state.todos\r\n            ]\r\n        })\r\n    }\r\n    delTodo = (idx)=>{\r\n        const todos = [...this.state.todos];\r\n        todos.splice(idx,1);\r\n        this.setState({\r\n            todos:todos\r\n        }); \r\n    }\r\n    toggle = (index)=>{\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos));\r\n        newTodos[index].done = !newTodos[index].done;\r\n        this.setState({\r\n            todos:newTodos\r\n        })\r\n    }\r\n    renderTodos = (done)=>{\r\n        return this.state.todos.map((todo,idx)=>{\r\n            if(done===todo.done){\r\n                return <li>\r\n                    <input\r\n                        onClick={()=>this.toggle(idx)}\r\n                        checked={done}\r\n                        type=\"checkbox\"\r\n                    />\r\n                    <span>{todo.title}</span>\r\n                    <button \r\n                        onClick={()=>this.delTodo(idx)}\r\n                    >\r\n                        删除\r\n                    </button>\r\n                </li>\r\n            }\r\n        })\r\n    }\r\n    render(){\r\n        \r\n        const {todos,inpValue} = this.state;\r\n        \r\n        return(\r\n            <div>\r\n                <input\r\n                    ref={inp=>this.input = inp}\r\n                    value={inpValue}\r\n                    type=\"text\"\r\n                    onChange={this.handleChange}\r\n                />\r\n                <button onClick={this.addTodo}>添加</button>\r\n                <h2>正在进行</h2>\r\n                <ul>\r\n                    {this.renderTodos(false)}\r\n                </ul>\r\n                <h2>已经完成</h2>\r\n                <ul>\r\n                    {this.renderTodos(true)}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/*\r\nclass TodoList extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            inputValue:'',\r\n            list: []\r\n        }\r\n    }\r\n    \r\n     render(){\r\n         return(\r\n             <Fragment>\r\n                 <div>\r\n                    <input\r\n                        value = {this.state.inputValue}\r\n                        onChange={this.handleInputChange.bind(this)} \r\n                    />\r\n                    <button onClick ={this.handleBtnClick.bind(this)} >提交</button>\r\n                 </div>\r\n                 <ul>\r\n                     {\r\n                         this.state.list.map((item,index)=>{\r\n                             return (\r\n                             <li\r\n                                key={index} \r\n                                onClick = {this.handleItemDelete.bind(this, index)}\r\n                            >\r\n                                {item}\r\n                            </li>)\r\n                         })\r\n                     }\r\n                 </ul>\r\n             </Fragment>\r\n             \r\n         )\r\n     }\r\n\r\n     handleInputChange(e){\r\n         this.setState({\r\n            inputValue:e.target.value\r\n         })\r\n     }\r\n     handleBtnClick(){\r\n        this.setState({\r\n            list:[...this.state.list,this.state.inputValue],\r\n            inputValue:''\r\n        })\r\n     }\r\n     handleItemDelete(index){\r\n        const list = [...this.state.list];\r\n        list.splice(index,1);\r\n        this.setState({\r\n            list:list\r\n        })\r\n     }\r\n\r\n     \r\n}\r\n*/\r\n\r\nexport default TodoList;","import React,{ Component} from 'react';\r\n\r\n\r\nclass input extends Component{\r\n\r\n}\r\n\r\n\r\nexport default input;","import React,{ Component} from 'react';\r\n\r\n\r\nclass List extends Component{\r\n\r\n}\r\n\r\n\r\nexport default List;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TodoList from './TodoList';\n\n\nReactDOM.render(<TodoList />,document.getElementById('root')\n);\n"],"sourceRoot":""}